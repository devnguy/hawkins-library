{"version":3,"file":"static/webpack/static/development/pages/manage-books.js.744b6415ac9aad9f4dda.hot-update.js","sources":["webpack:///./components/Table.js"],"sourcesContent":["import { useState, useEffect, useReducer } from 'react'\n\n\nconst NoteApp = () => {\n  const notesReducer = (state, action) => {\n    switch (action.type) {\n      case 'POPULATE_NOTES':\n        return action.notes\n      case 'ADD_NOTE':\n        return [\n          ...state,\n          { title: action.title, body: action.body }\n        ]\n      case 'REMOVE_NOTE':\n        return state.filter((note) => note.title !== action.title )\n      default:\n        return state\n    }\n  }\n\n  const [notes, dispatch] = useReducer(notesReducer, [])\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n\n  const addNote = (e) => {\n    e.preventDefault()\n    dispatch({\n      type: 'ADD_NOTE',\n      title,\n      body\n    })\n    setTitle('')\n    setBody('')\n  }\n\n  const removeNote = (title) => {\n    dispatch({\n      type: 'REMOVE_NOTE',\n      title\n    })\n  }\n\n  useEffect(() => {\n    const notes = JSON.parse(localStorage.getItem('notes'))\n\n    if (notes) {\n      dispatch({ type: 'POPULATE_NOTES', notes })\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(notes))\n  }, [notes])\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      {/* Render state to page */}\n      {notes.map((note) => (\n        <Note key={note.title} note={note} removeNote={removeNote} />\n      ))}\n\n      <p>Add note</p>\n      <form onSubmit={addNote}>\n\n        <label>Title</label>\n        <input \n          value={title} \n          onChange={(e) => {setTitle(e.target.value)}} \n        />\n\n        <label>Body</label>\n        <input \n          value={body} \n          onChange={(e) => {setBody(e.target.value)}} \n        />\n\n        <button>add note</button>\n\n      </form>\n\n    </div>\n  )\n}\n\nconst Note = ({ note, removeNote }) => {\n  useEffect(() => {\n    console.log('setting up effect running on notsdfe');\n    \n    return () => {\n      console.log('cleaning up use EFFECT');\n      \n    }\n  }, [])\n\n\n  return (\n    <div>\n      <h3>{note.title}</h3>\n      <p>{note.body}</p>\n      <button onClick={() => removeNote(note.title)}>x</button>\n    </div>\n  )\n}\n\n//   const [count, setCount] = useState(0)\n//   const [text, setText] = useState('')\n\n//   useEffect(() => {\n//     console.log('this should only run once');\n//   }, [])\n\n//   useEffect(() => {\n//     console.log('use effect ran');\n//     document.title = count\n    \n//   }, [count])\n\n//   return (\n//     <div>\n//       <p>The {text || 'count'} is {count}</p>\n//       <button onClick={() => setCount(count - 1)}>-1</button>\n//       <button onClick={() => setCount(0)}>reset</button>\n//       <button onClick={() => setCount(count + 1)}>+1</button>\n//       <input\n//         value={text}\n//         onChange={(e) => setText(e.target.value)}\n//       />\n//     </div>\n//   )\n// }\n\nexport default NoteApp"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAXA;AAaA;AACA;AAhBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;A","sourceRoot":""}
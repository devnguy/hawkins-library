{"ast":null,"code":"var _jsxFileName = \"/Users/devnguyen/Programming/OSU/cs340/hawkins-library/components/Table.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect, useReducer } from 'react';\n\nconst NoteApp = () => {\n  const notesReducer = (state, action) => {\n    switch (action.type) {\n      case 'POPULATE_NOTES':\n        return action.notes;\n\n      case 'ADD_NOTE':\n        return [...state, {\n          title: action.title,\n          body: action.body\n        }];\n\n      case 'REMOVE_NOTE':\n        return state.filter(note => note.title !== action.title);\n\n      default:\n        return state;\n    }\n  };\n\n  const {\n    0: notes,\n    1: dispatch\n  } = useReducer(notesReducer, []);\n  const {\n    0: title,\n    1: setTitle\n  } = useState('');\n  const {\n    0: body,\n    1: setBody\n  } = useState('');\n\n  const addNote = e => {\n    e.preventDefault();\n    dispatch({\n      type: 'ADD_NOTE',\n      title,\n      body\n    });\n    setTitle('');\n    setBody('');\n  };\n\n  const removeNote = title => {\n    dispatch({\n      type: 'REMOVE_NOTE',\n      title\n    });\n  };\n\n  useEffect(() => {\n    const notes = JSON.parse(localStorage.getItem('notes'));\n\n    if (notes) {\n      dispatch({\n        type: 'POPULATE_NOTES',\n        notes\n      });\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(notes));\n  }, [notes]);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Notes\"), notes.map(note => __jsx(Note, {\n    key: note.title,\n    note: note,\n    removeNote: removeNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  })), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, \"Add note\"), __jsx(\"form\", {\n    onSubmit: addNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Title\"), __jsx(\"input\", {\n    value: title,\n    onChange: e => {\n      setTitle(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"Body\"), __jsx(\"input\", {\n    value: body,\n    onChange: e => {\n      setBody(e.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), __jsx(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"add note\")));\n};\n\nconst Note = ({\n  note,\n  removeNote\n}) => {\n  useEffect(() => {\n    console.log('setting up effect running on notsdfe');\n    return () => {\n      console.log('cleaning up use EFFECT');\n    };\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, __jsx(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, note.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, note.body), __jsx(\"button\", {\n    onClick: () => removeNote(note.title),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, \"x\"));\n}; //   const [count, setCount] = useState(0)\n//   const [text, setText] = useState('')\n//   useEffect(() => {\n//     console.log('this should only run once');\n//   }, [])\n//   useEffect(() => {\n//     console.log('use effect ran');\n//     document.title = count\n//   }, [count])\n//   return (\n//     <div>\n//       <p>The {text || 'count'} is {count}</p>\n//       <button onClick={() => setCount(count - 1)}>-1</button>\n//       <button onClick={() => setCount(0)}>reset</button>\n//       <button onClick={() => setCount(count + 1)}>+1</button>\n//       <input\n//         value={text}\n//         onChange={(e) => setText(e.target.value)}\n//       />\n//     </div>\n//   )\n// }\n\n\nexport default NoteApp;","map":{"version":3,"sources":["/Users/devnguyen/Programming/OSU/cs340/hawkins-library/components/Table.js"],"names":["useState","useEffect","useReducer","NoteApp","notesReducer","state","action","type","notes","title","body","filter","note","dispatch","setTitle","setBody","addNote","e","preventDefault","removeNote","JSON","parse","localStorage","getItem","setItem","stringify","map","target","value","Note","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer } from 'react'\n\n\nconst NoteApp = () => {\n  const notesReducer = (state, action) => {\n    switch (action.type) {\n      case 'POPULATE_NOTES':\n        return action.notes\n      case 'ADD_NOTE':\n        return [\n          ...state,\n          { title: action.title, body: action.body }\n        ]\n      case 'REMOVE_NOTE':\n        return state.filter((note) => note.title !== action.title )\n      default:\n        return state\n    }\n  }\n\n  const [notes, dispatch] = useReducer(notesReducer, [])\n  const [title, setTitle] = useState('')\n  const [body, setBody] = useState('')\n\n  const addNote = (e) => {\n    e.preventDefault()\n    dispatch({\n      type: 'ADD_NOTE',\n      title,\n      body\n    })\n    setTitle('')\n    setBody('')\n  }\n\n  const removeNote = (title) => {\n    dispatch({\n      type: 'REMOVE_NOTE',\n      title\n    })\n  }\n\n  useEffect(() => {\n    const notes = JSON.parse(localStorage.getItem('notes'))\n\n    if (notes) {\n      dispatch({ type: 'POPULATE_NOTES', notes })\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem('notes', JSON.stringify(notes))\n  }, [notes])\n\n  return (\n    <div>\n      <h1>Notes</h1>\n\n      {/* Render state to page */}\n      {notes.map((note) => (\n        <Note key={note.title} note={note} removeNote={removeNote} />\n      ))}\n\n      <p>Add note</p>\n      <form onSubmit={addNote}>\n\n        <label>Title</label>\n        <input \n          value={title} \n          onChange={(e) => {setTitle(e.target.value)}} \n        />\n\n        <label>Body</label>\n        <input \n          value={body} \n          onChange={(e) => {setBody(e.target.value)}} \n        />\n\n        <button>add note</button>\n\n      </form>\n\n    </div>\n  )\n}\n\nconst Note = ({ note, removeNote }) => {\n  useEffect(() => {\n    console.log('setting up effect running on notsdfe');\n    \n    return () => {\n      console.log('cleaning up use EFFECT');\n    }\n  }, [])\n\n\n  return (\n    <div>\n      <h3>{note.title}</h3>\n      <p>{note.body}</p>\n      <button onClick={() => removeNote(note.title)}>x</button>\n    </div>\n  )\n}\n\n//   const [count, setCount] = useState(0)\n//   const [text, setText] = useState('')\n\n//   useEffect(() => {\n//     console.log('this should only run once');\n//   }, [])\n\n//   useEffect(() => {\n//     console.log('use effect ran');\n//     document.title = count\n    \n//   }, [count])\n\n//   return (\n//     <div>\n//       <p>The {text || 'count'} is {count}</p>\n//       <button onClick={() => setCount(count - 1)}>-1</button>\n//       <button onClick={() => setCount(0)}>reset</button>\n//       <button onClick={() => setCount(count + 1)}>+1</button>\n//       <input\n//         value={text}\n//         onChange={(e) => setText(e.target.value)}\n//       />\n//     </div>\n//   )\n// }\n\nexport default NoteApp"]},"metadata":{},"sourceType":"module"}
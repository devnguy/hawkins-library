{"ast":null,"code":"import { useState, useEffect } from 'react';\n/**\n * Hook returns true if currently at top of page.\n */\n\nvar useScrollFromTop = function useScrollFromTop() {\n  var _useState = useState(true),\n      isTop = _useState[0],\n      setIsTop = _useState[1]; // Add scroll event listener when component mounts.\n\n\n  useEffect(function () {\n    var handleScroll = function handleScroll() {\n      if (window.scrollY > 2) {\n        setIsTop(false);\n      } else {\n        setIsTop(true);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll); // Remove event listener (subscription) on unmount.\n\n    return function () {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  return isTop;\n};\n\nexport default useScrollFromTop;","map":{"version":3,"sources":["/Users/devnguyen/Programming/OSU/cs340/hawkins-library/frontend/components/hooks/useScrollFromTop.js"],"names":["useState","useEffect","useScrollFromTop","isTop","setIsTop","handleScroll","window","scrollY","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA;;;;AAGA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAAA,kBACHF,QAAQ,CAAC,IAAD,CADL;AAAA,MACtBG,KADsB;AAAA,MACfC,QADe,iBAG7B;;;AACAH,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,UAAIC,MAAM,CAACC,OAAP,GAAiB,CAArB,EAAwB;AACtBH,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,OAFD,MAEO;AACLA,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAND;;AAOAE,IAAAA,MAAM,CAACE,gBAAP,CAAwB,QAAxB,EAAkCH,YAAlC,EARc,CASd;;AACA,WAAQ,YAAM;AACZC,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCJ,YAArC;AACD,KAFD;AAGD,GAbQ,EAaN,EAbM,CAAT;AAeA,SAAOF,KAAP;AACD,CApBD;;AAsBA,eAAeD,gBAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\n/**\n * Hook returns true if currently at top of page.\n */\nconst useScrollFromTop = () => {\n  const [isTop, setIsTop] = useState(true)\n\n  // Add scroll event listener when component mounts.\n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY > 2) {\n        setIsTop(false)\n      } else {\n        setIsTop(true)\n      }\n    }\n    window.addEventListener('scroll', handleScroll)\n    // Remove event listener (subscription) on unmount.\n    return (() => {\n      window.removeEventListener('scroll', handleScroll)\n    })\n  }, [])\n\n  return isTop\n}\n\nexport default useScrollFromTop"]},"metadata":{},"sourceType":"module"}